<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SheldonXia&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-24T03:05:59.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Xia Ming</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>手动安装YCM</title>
    <link href="http://yoursite.com/2017/11/24/%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85YCM/"/>
    <id>http://yoursite.com/2017/11/24/手动安装YCM/</id>
    <published>2017-11-24T02:56:52.000Z</published>
    <updated>2017-11-24T03:05:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;对于常年使用vim的我来说，是多么希望vim拥有与IDE一样的可以实现类成员访问或者自动补全关键字、函数名等各种神奇的操作，通过Google发现，vim中有一个神奇的插件，即<strong><font color="blue">YouCompleteMe</font></strong>，简称YCM，如果机器可以连接外网的话，是可以通过vundle直接在线安装的，可惜公司内部的开发测试机都是无法访问外网的，所以只能自己去折腾手动安装YCM的方法了，不废话了，下面就来详细说一下具体安装方式。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;对于常年使用vim的我来说，是多么希望vim拥有与IDE一样的可以实现类成员访问或者自动补全关键字、函数名等各种神奇的操作，通过Google发现，vim中有一个神奇的插件，即&lt;strong&gt;&lt;font color=&quot;blue&quot;&gt;YouCompleteMe&lt;/font&gt;&lt;/strong&gt;，简称YCM，如果机器可以连接外网的话，是可以通过vundle直接在线安装的，可惜公司内部的开发测试机都是无法访问外网的，所以只能自己去折腾手动安装YCM的方法了，不废话了，下面就来详细说一下具体安装方式。&lt;/p&gt;
    
    </summary>
    
      <category term="vim相关笔记" scheme="http://yoursite.com/categories/vim%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>引用的本质分析</title>
    <link href="http://yoursite.com/2017/11/23/%E5%BC%95%E7%94%A8%E7%9A%84%E6%9C%AC%E8%B4%A8%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/11/23/引用的本质分析/</id>
    <published>2017-11-23T08:08:33.000Z</published>
    <updated>2017-11-23T08:40:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-引用的意义"><a href="#1-引用的意义" class="headerlink" title="1. 引用的意义"></a>1. 引用的意义</h1><p>引用作为变量别名（另一种表现形式）而存在，因此在某一些场合可以代替指针<br>引用相对于指针来说具有更好的可读性和实用性.</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-引用的意义&quot;&gt;&lt;a href=&quot;#1-引用的意义&quot; class=&quot;headerlink&quot; title=&quot;1. 引用的意义&quot;&gt;&lt;/a&gt;1. 引用的意义&lt;/h1&gt;&lt;p&gt;引用作为变量别名（另一种表现形式）而存在，因此在某一些场合可以代替指针&lt;br&gt;引用相对于指针来说具有更好的可读性和实用性.&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="http://yoursite.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>进化的const</title>
    <link href="http://yoursite.com/2017/11/23/%E8%BF%9B%E5%8C%96%E7%9A%84const/"/>
    <id>http://yoursite.com/2017/11/23/进化的const/</id>
    <published>2017-11-23T05:21:45.000Z</published>
    <updated>2017-11-24T02:44:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C语言中的const"><a href="#C语言中的const" class="headerlink" title="C语言中的const"></a>C语言中的const</h1><ul><li>const修饰的变量是<font color="red">只读</font>的，其本质仍然是变量</li><li>const修饰的<font color="blue">局部变量</font>在栈上分配空间，可以根据指针去修改其中的值</li><li>const修饰的<font color="blue">全局变量</font>在只读存储区分配空间</li><li>const值在编译期间有用，在运行期间无作用</li></ul><p><em>const修饰的变量并不是真正的常量，它只是告诉编译器该变量不能出现在赋值符号的<br>左边；C语言中的const只是使得变量具有只读属性；const将具有全局声明周期的变量存储于只读存储区</em></p><a id="more"></a><h1 id="C-中的const"><a href="#C-中的const" class="headerlink" title="C++中的const"></a>C++中的const</h1><p>先看一个例子：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span>* p = (<span class="keyword">int</span>*c)&amp;c;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">*p = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;   <span class="comment">//只输出0</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//输出5，这是为什么？</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译时，编译器碰到const声明时，会在符号表中存入这个const所修饰的常量。再继续编译时，如果发现使用了该常量，则直接用符号表中的值进行替换。<br><br>由于C++兼容C语言，所以仍然会给const修饰的变量分配空间，通常该内存空间不会被使用，但是在如下两个情况下才会被分配：</p><ul><li>对const常量使用了关键字extern，即为外部代码使用</li><li>对const常量使用了&amp;操作符，即取值</li></ul><p>需要注意的是，C++编译器虽然可能会为const常量分配空间，但是不会使用其中的存储值，这么做仅仅是为了兼容C语言，这也能解释了上面例子中注释所标注的结果。</p><h1 id="符号表"><a href="#符号表" class="headerlink" title="符号表"></a>符号表</h1><p><strong><font color="blue">符号表</font></strong>是编译器在编译过程中产生的表，该表示编译器内部使用的一种数据结构，比如，当定义了 <em><font color="red">const int c = 0;</font></em> 此时编译器就会将c与0存入符号表中，当编译到使用c的地方时，直接从符号表中取出c对应的值进行替换。</p><table><thead><tr><th>name</th><th>value</th></tr></thead><tbody><tr><td> …</td><td>…</td></tr><tr><td>  c</td><td>0</td></tr><tr><td> …</td><td>…</td></tr></tbody></table><p>C++中的const常量类似于宏定义，宏定义是在预处理时对文本进行替换处理，而const是在编译过程中编译器对const常量进行<font color="red">类型检查</font>和<font color="red">作用域检查</font>。<br>宏定义是由预处理处理，只是单纯的文本替换而已。<br><br>最后，再来一个用例感受一下。<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> a 3</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> b = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * g()中可以访问到f()中定义的宏，这是因为宏定义是预处理器处理的，直接进行文本替换；</span></span><br><span class="line"><span class="comment"> * 而编译器并不知道宏是什么，即编译器看到的a就是3，没有机会对宏进行作用域检查</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> A = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> B = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * C语言中会报错，因为A和B都是变量</span></span><br><span class="line"><span class="comment"> * C++中不会报错，因为A和B是真正的常量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[A + B] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(A+B); i++)&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">array</span>[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f();</span><br><span class="line">g();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C语言中的const&quot;&gt;&lt;a href=&quot;#C语言中的const&quot; class=&quot;headerlink&quot; title=&quot;C语言中的const&quot;&gt;&lt;/a&gt;C语言中的const&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;const修饰的变量是&lt;font color=&quot;red&quot;&gt;只读&lt;/font&gt;的，其本质仍然是变量&lt;/li&gt;
&lt;li&gt;const修饰的&lt;font color=&quot;blue&quot;&gt;局部变量&lt;/font&gt;在栈上分配空间，可以根据指针去修改其中的值&lt;/li&gt;
&lt;li&gt;const修饰的&lt;font color=&quot;blue&quot;&gt;全局变量&lt;/font&gt;在只读存储区分配空间&lt;/li&gt;
&lt;li&gt;const值在编译期间有用，在运行期间无作用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;const修饰的变量并不是真正的常量，它只是告诉编译器该变量不能出现在赋值符号的&lt;br&gt;左边；C语言中的const只是使得变量具有只读属性；const将具有全局声明周期的变量存储于只读存储区&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="http://yoursite.com/categories/C/"/>
    
    
      <category term="编程基础知识" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>vimrc</title>
    <link href="http://yoursite.com/2017/11/23/vimrc/"/>
    <id>http://yoursite.com/2017/11/23/vimrc/</id>
    <published>2017-11-23T04:18:44.000Z</published>
    <updated>2017-11-23T08:43:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录了一些常用的vim配置以及相应的插件</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br></pre></td><td class="code"><pre><span class="line">let mapleader=&quot;;&quot;</span><br><span class="line">set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936</span><br><span class="line">set encoding=utf-8</span><br><span class="line">set termencoding=utf-8</span><br><span class="line">set rtp+=~/.vim/bundle/vundle/</span><br><span class="line">call vundle#begin()</span><br><span class="line">Plugin &apos;nerdcommenter/NERD_commenter.vim&apos;</span><br><span class="line">Plugin &apos;nerdtree/NERD_tree.vim&apos;</span><br><span class="line">Plugin &apos;taglist/taglist.vim&apos;</span><br><span class="line">Plugin &apos;vim-fswitch/fswitch.vim&apos;</span><br><span class="line">Plugin &apos;Valloric/YouCompleteMe&apos;</span><br><span class="line">Plugin &apos;hari-rangarajan/CCTree&apos;</span><br><span class="line">Plugin &apos;mattn/emmet-vim&apos;</span><br><span class="line">Plugin &apos;pangloss/vim-javascript&apos;</span><br><span class="line">Plugin &apos;Chiel92/vim-autoformat&apos;</span><br><span class="line">&quot;Plugin &apos;vim-go/go.vim&apos;</span><br><span class="line">&quot;Plugin &apos;vim-gocode/godoc.vim&apos;</span><br><span class="line">&quot;Plugin &apos;vim-godef/godef.vim&apos;</span><br><span class="line">call vundle#end()</span><br><span class="line">colorscheme default</span><br><span class="line">&quot;nnoremap &lt;silent&gt; &lt;F4&gt; :Tlist&lt;CR&gt;</span><br><span class="line">&quot;nnoremap &lt;silent&gt; &lt;F4&gt; :TagbarToggle&lt;CR&gt;</span><br><span class="line">&quot;nnoremap &lt;silent&gt; &lt;F5&gt; :NERDTreeToggle&lt;CR&gt;</span><br><span class="line">map &lt;F6&gt; :TagbarToggle&lt;CR&gt;</span><br><span class="line">map &lt;F7&gt; :NERDTreeToggle&lt;CR&gt;</span><br><span class="line">&quot; 开启文件类型侦测</span><br><span class="line">filetype on</span><br><span class="line">&quot; 根据侦测到的不同类型加载对应的插件</span><br><span class="line">filetype plugin on</span><br><span class="line">&quot; 定义快捷键到行首和行尾</span><br><span class="line">nmap LB 0</span><br><span class="line">&quot; 开启实时搜索功能</span><br><span class="line">set incsearch</span><br><span class="line">&quot; 搜索时大小写不敏感</span><br><span class="line">set ignorecase</span><br><span class="line">&quot; 关闭兼容模式</span><br><span class="line">set nocompatible</span><br><span class="line">&quot; vim 自身命令行模式智能补全</span><br><span class="line">set wildmenu</span><br><span class="line">&quot; 将 pathogen 自身也置于独立目录中，需指定其路径</span><br><span class="line">runtime bundle/pathogen/autoload/pathogen.vim</span><br><span class="line">&quot; 运行 pathogen</span><br><span class="line">execute pathogen#infect()</span><br><span class="line">&quot; 禁止光标闪烁</span><br><span class="line">set gcr=a:block-blinkon0</span><br><span class="line">&quot; 总是显示状态栏</span><br><span class="line">set laststatus=2</span><br><span class="line">&quot; 开启行号显示</span><br><span class="line">set number</span><br><span class="line">&quot; 高亮显示当前行/列</span><br><span class="line">set cursorline</span><br><span class="line">&quot;set cursorcolumn</span><br><span class="line">&quot; 高亮显示搜索结果</span><br><span class="line">set hlsearch</span><br><span class="line">&quot; 设置 gvim 显示字体</span><br><span class="line">set guifont=YaHei\ Consolas\ Hybrid\ 11.5</span><br><span class="line">&quot; 禁止折行</span><br><span class="line">set nowrap</span><br><span class="line">&quot;将un文件统一写入</span><br><span class="line">let $VIMFILES = $HOME</span><br><span class="line">set undofile</span><br><span class="line">set undodir=$VIMFILES/.undodir</span><br><span class="line">&quot; 设置状态栏主题风格</span><br><span class="line">let g:Powerline_colorscheme=&apos;solarized256&apos;</span><br><span class="line">set guifont=PowerlineSymbols\ for\ Powerline</span><br><span class="line">set nocompatible</span><br><span class="line">set laststatus=2</span><br><span class="line">set t_Co=256</span><br><span class="line">let g:Powerline_symbols = &apos;fancy&apos;</span><br><span class="line">let Powerline_symbols=&apos;compatible&apos;</span><br><span class="line">&quot; 开启语法高亮功能</span><br><span class="line">syntax enable</span><br><span class="line">&quot; &quot; 允许用指定语法高亮配色方案替换默认方案</span><br><span class="line">syntax on</span><br><span class="line">&quot; 自适应不同语言的智能缩进</span><br><span class="line">filetype indent on</span><br><span class="line">&quot; &quot; 将制表符扩展为空格</span><br><span class="line">set expandtab</span><br><span class="line">&quot; 设置编辑时制表符占用空格数</span><br><span class="line">set tabstop=4</span><br><span class="line">&quot; 设置格式化时制表符占用空格数</span><br><span class="line">set shiftwidth=4</span><br><span class="line">&quot; 让 vim 把连续数量的空格视为一个制表符</span><br><span class="line">set softtabstop=4</span><br><span class="line">&quot; 随 vim 自启动</span><br><span class="line">&quot;let g:indent_guides_enable_on_vim_startup=1</span><br><span class="line">&quot; 从第二层开始可视化显示缩进</span><br><span class="line">let g:indent_guides_start_level=2</span><br><span class="line">&quot; 色块宽度</span><br><span class="line">let g:indent_guides_guide_size=1</span><br><span class="line">&quot; 快捷键 i 开/关缩进可视化</span><br><span class="line">:nmap &lt;silent&gt; &lt;Leader&gt;i &lt;Plug&gt;IndentGuidesToggle</span><br><span class="line">&quot; 基于缩进或语法进行代码折叠</span><br><span class="line">set foldmethod=indent</span><br><span class="line">set foldmethod=syntax</span><br><span class="line">&quot; 启动 vim 时关闭折叠代码</span><br><span class="line">set nofoldenable</span><br><span class="line">&quot; *.cpp 和 *.h 间切换</span><br><span class="line">nmap &lt;Leader&gt;ch :A&lt;CR&gt;</span><br><span class="line">&quot; 子窗口中显示 *.cpp 或 *.h</span><br><span class="line">nmap &lt;Leader&gt;sch :AS&lt;CR&gt;</span><br><span class="line">&quot; 正向遍历同名标签</span><br><span class="line">nmap &lt;Leader&gt;tn :tnext&lt;CR&gt;</span><br><span class="line">&quot; 反向遍历同名标签</span><br><span class="line">nmap &lt;Leader&gt;tp :tprevious&lt;CR&gt;</span><br><span class="line">&quot; 设置插件 indexer 调用 ctags 的参数</span><br><span class="line">&quot; 默认 --c++-kinds=+p+l，重新设置为 --c++-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v</span><br><span class="line">&quot; 默认 --fields=+iaS 不满足 YCM 要求，需改为 --fields=+iaSl</span><br><span class="line">let g:indexer_ctagsCommandLineOptions=&quot;--c++-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v --fields=+iaSl --extra=+q&quot;</span><br><span class="line">nnoremap &lt;leader&gt;jd :YcmCompleter GoToDeclaration&lt;CR&gt;</span><br><span class="line">&quot; 只能是 #include 或已打开的文件</span><br><span class="line">nnoremap &lt;leader&gt;je :YcmCompleter GoToDefinition&lt;CR&gt;</span><br><span class="line">&quot; 设置 tagbar 子窗口的位置出现在主编辑区的左边</span><br><span class="line">let tagbar_left=1</span><br><span class="line">&quot; 设置显示／隐藏标签列表子窗口的快捷键。速记：tag list</span><br><span class="line">nnoremap &lt;Leader&gt;tl :TagbarToggle&lt;CR&gt;</span><br><span class="line">&quot; 设置标签子窗口的宽度</span><br><span class="line">let tagbar_width=32</span><br><span class="line">&quot; tagbar 子窗口中不显示冗余帮助信息</span><br><span class="line">let g:tagbar_compact=1</span><br><span class="line">&quot; 设置 ctags 对哪些代码元素生成标签</span><br><span class="line">let g:tagbar_type_cpp = &#123;</span><br><span class="line">            \ &apos;kinds&apos; : [</span><br><span class="line">            \ &apos;d:macros:1&apos;,</span><br><span class="line">            \ &apos;g:enums&apos;,</span><br><span class="line">            \ &apos;t:typedefs:0:0&apos;,</span><br><span class="line">            \ &apos;e:enumerators:0:0&apos;,</span><br><span class="line">            \ &apos;n:namespaces&apos;,</span><br><span class="line">            \ &apos;c:classes&apos;,</span><br><span class="line">            \ &apos;s:structs&apos;,</span><br><span class="line">            \ &apos;u:unions&apos;,</span><br><span class="line">            \ &apos;f:functions&apos;,</span><br><span class="line">            \ &apos;m:members:0:0&apos;,</span><br><span class="line">            \ &apos;v:global:0:0&apos;,</span><br><span class="line">            \ &apos;x:external:0:0&apos;,</span><br><span class="line">            \ &apos;l:local:0:0&apos;</span><br><span class="line">            \ ],</span><br><span class="line">            \ &apos;sro&apos;        : &apos;::&apos;,</span><br><span class="line">            \ &apos;kind2scope&apos; : &#123;</span><br><span class="line">            \ &apos;g&apos; : &apos;enum&apos;,</span><br><span class="line">            \ &apos;n&apos; : &apos;namespace&apos;,</span><br><span class="line">            \ &apos;c&apos; : &apos;class&apos;,</span><br><span class="line">            \ &apos;s&apos; : &apos;struct&apos;,</span><br><span class="line">            \ &apos;u&apos; : &apos;union&apos;</span><br><span class="line">            \ &#125;,</span><br><span class="line">            \ &apos;scope2kind&apos; : &#123;</span><br><span class="line">            \ &apos;enum&apos;      : &apos;g&apos;,</span><br><span class="line">            \ &apos;namespace&apos; : &apos;n&apos;,</span><br><span class="line">            \ &apos;class&apos;     : &apos;c&apos;,</span><br><span class="line">            \ &apos;struct&apos;    : &apos;s&apos;,</span><br><span class="line">            \ &apos;union&apos;     : &apos;u&apos;</span><br><span class="line">            \ &#125;,</span><br><span class="line">            \ &#125;</span><br><span class="line">&quot;autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx call tagbar#autoopen()</span><br><span class="line">let OmniCpp_DefaultNamespaces = [&quot;_GLIBCXX_STD&quot;]</span><br><span class="line">&quot;set tags+=/usr/include/c++/4.4.6/stdcpp.tags</span><br><span class="line">&quot;set tags+=/usr/include/sys.tags</span><br><span class="line"></span><br><span class="line">autocmd BufNewFile *.cpp,*.cc,*.[ch],*.sh,*.java exec &quot;:call SetTitle()&quot;</span><br><span class="line">&quot;定义函数SetTitle，自动插入文件头</span><br><span class="line">func SetTitle()</span><br><span class="line">    &quot;如果文件类型为.sh文件</span><br><span class="line">    if &amp;filetype == &apos;sh&apos;</span><br><span class="line">        call setline(1,&quot;\#########################################################################&quot;)</span><br><span class="line">        call append(line(&quot;.&quot;), &quot;\# File Name: &quot;.expand(&quot;%&quot;))</span><br><span class="line">        call append(line(&quot;.&quot;)+1, &quot;\# Author: XiaMing&quot;)</span><br><span class="line">        call append(line(&quot;.&quot;)+2, &quot;\# mail: xiaming@baidu.com&quot;)</span><br><span class="line">        call append(line(&quot;.&quot;)+3, &quot;\# Created Time: &quot;.strftime(&quot;%c&quot;))</span><br><span class="line">        call append(line(&quot;.&quot;)+4, &quot;\#########################################################################&quot;)</span><br><span class="line">        call append(line(&quot;.&quot;)+5, &quot;\#!/bin/bash&quot;)</span><br><span class="line">        call append(line(&quot;.&quot;)+6, &quot;&quot;)</span><br><span class="line">    else</span><br><span class="line">        call setline(1, &quot;/*************************************************************************&quot;)</span><br><span class="line">        call append(line(&quot;.&quot;), &quot;* Copyright(c) 2009-2017 Baidu Inc&quot;)</span><br><span class="line">        call append(line(&quot;.&quot;)+1, &quot;* All rights reserved&quot;)</span><br><span class="line">        call append(line(&quot;.&quot;)+2, &quot;*                       &quot;)</span><br><span class="line">        call append(line(&quot;.&quot;)+3, &quot;* @filename: &quot;.expand(&quot;%&quot;))</span><br><span class="line">        call append(line(&quot;.&quot;)+4, &quot;* @brief: &quot;)</span><br><span class="line">        call append(line(&quot;.&quot;)+5, &quot;* @version: &quot;)</span><br><span class="line">        call append(line(&quot;.&quot;)+6, &quot;* @author: XiaMing&quot;)</span><br><span class="line">        call append(line(&quot;.&quot;)+7, &quot;* @date: &quot;.strftime(&quot;%c&quot;))</span><br><span class="line">        call append(line(&quot;.&quot;)+8, &quot; ************************************************************************/&quot;)</span><br><span class="line">        call append(line(&quot;.&quot;)+9, &quot;&quot;)</span><br><span class="line">    endif</span><br><span class="line">    if &amp;filetype == &apos;cpp&apos;</span><br><span class="line">        call append(line(&quot;.&quot;)+10, &quot;#include &lt;iostream&gt;&quot;)</span><br><span class="line">        call append(line(&quot;.&quot;)+11, &quot;using namespace std;&quot;)</span><br><span class="line">        call append(line(&quot;.&quot;)+12, &quot;int main()&#123;&quot;)</span><br><span class="line">        call append(line(&quot;.&quot;)+13, &quot;    return 0;&quot;)</span><br><span class="line">        call append(line(&quot;.&quot;)+14, &quot;&#125;&quot;)</span><br><span class="line">        call append(line(&quot;.&quot;)+15, &quot;&quot;)</span><br><span class="line">    endif</span><br><span class="line">    if &amp;filetype == &apos;c&apos;</span><br><span class="line">        call append(line(&quot;.&quot;)+10, &quot;#include &lt;stdio.h&gt;&quot;)</span><br><span class="line">        call append(line(&quot;.&quot;)+11, &quot;#include &lt;stdlib.h&gt;&quot;)</span><br><span class="line">        call append(line(&quot;.&quot;)+12, &quot;&quot;)</span><br><span class="line">    endif</span><br><span class="line">    if &amp;filetype == &apos;cc&apos;</span><br><span class="line">        call append(line(&quot;.&quot;)+10, &quot;#include &lt;iostream&gt;&quot;)</span><br><span class="line">        call append(line(&quot;.&quot;)+11, &quot;using namespace std;&quot;)</span><br><span class="line">        call append(line(&quot;.&quot;)+12, &quot;&quot;)</span><br><span class="line">    endif</span><br><span class="line">    autocmd BufNewFile * normal G</span><br><span class="line">endfunc</span><br><span class="line"></span><br><span class="line">let OmniCpp_DefaultNamespaces = [&quot;_GLIBCXX_STD&quot;]</span><br><span class="line">&quot;set tags+=/usr/include/c++/4.4.4/stdcpp.tags</span><br><span class="line">let NERDTreeMinimalUI=0</span><br><span class="line">let NERDTreeWinPos=&quot;right&quot;</span><br><span class="line">let NERDTreeQuitOnOpen=1</span><br><span class="line">&quot;只剩 NERDTree时自动关闭</span><br><span class="line">autocmd bufenter * if (winnr(&quot;$&quot;) == 1 &amp;&amp; exists(&quot;b:NERDTreeType&quot;) &amp;&amp; b:NERDTreeType == &quot;primary&quot;) | q | endif</span><br><span class="line"></span><br><span class="line">&quot; *.cpp 和 *.h 间切换</span><br><span class="line">nmap &lt;silent&gt; &lt;Leader&gt;sw :FSHere&lt;cr&gt;</span><br><span class="line">&quot;taglist窗口显示在右侧，缺省为左侧</span><br><span class="line">let Tlist_Use_Right_Window =1</span><br><span class="line">let OmniCpp_DefaultNamespaces = [&quot;_GLIBCXX_STD&quot;]</span><br><span class="line">let g:ycm_global_ycm_extra_conf = &apos;/home/mysql/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py&apos;</span><br><span class="line">let g:ycm_seed_identifiers_with_syntax=1</span><br><span class="line">set tags=tags;</span><br><span class="line">set autochdir</span><br><span class="line"></span><br><span class="line">&quot;cscope设置</span><br><span class="line">set cscopequickfix=s-,c-,d-,i-,t-,e-</span><br><span class="line">if filereadable(&quot;cscope.out&quot;)</span><br><span class="line">    cs add cscope.out</span><br><span class="line">endif</span><br><span class="line">if has(&quot;cscope&quot;)</span><br><span class="line">    set csprg=/usr/local/bin/cscope</span><br><span class="line">    set csto=0</span><br><span class="line">    set cst</span><br><span class="line">    set nocsverb</span><br><span class="line">    if filereadable(&quot;cscope.out&quot;)</span><br><span class="line">        cs add cscope.out</span><br><span class="line">    elseif $CSCOPE_DB != &quot;&quot;</span><br><span class="line">        cs add $CSCOPE_DB</span><br><span class="line">    endif</span><br><span class="line">    set csverb</span><br><span class="line">endif</span><br><span class="line">nmap &lt;silent&gt; &lt;Leader&gt;s :cs find s &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;</span><br><span class="line">nmap &lt;silent&gt; &lt;Leader&gt;g :cs find g &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;</span><br><span class="line">nmap &lt;silent&gt; &lt;Leader&gt;c :cs find c &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;</span><br><span class="line">nmap &lt;silent&gt; &lt;Leader&gt;t :cs find t &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;</span><br><span class="line">nmap &lt;silent&gt; &lt;Leader&gt;e :cs find e &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;</span><br><span class="line">nmap &lt;silent&gt; &lt;Leader&gt;f :cs find f &lt;C-R&gt;=expand(&quot;&lt;cfile&gt;&quot;)&lt;CR&gt;&lt;CR&gt;</span><br><span class="line">nmap &lt;silent&gt; &lt;Leader&gt;i :cs find i &lt;C-R&gt;=expand(&quot;&lt;cfile&gt;&quot;)&lt;CR&gt;&lt;CR&gt;</span><br><span class="line">nmap &lt;silent&gt; &lt;Leader&gt;d :cs find d &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nmap &lt;Leader&gt;tb :TagbarToggle&lt;CR&gt;</span><br><span class="line">let g:tagbar_ctags_bin=&apos;/usr/bin/ctags&apos;</span><br><span class="line">let g:tagbar_width=30</span><br><span class="line"></span><br><span class="line">&quot;在以下文件中开启tagbar</span><br><span class="line">&quot;autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx call tagbar#autoopen()</span><br><span class="line"></span><br><span class="line">&quot; 自动补全配置</span><br><span class="line">set completeopt=longest,menu</span><br><span class="line">&quot; &quot;让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)</span><br><span class="line">autocmd InsertLeave * if pumvisible() == 0|pclose|endif</span><br><span class="line">&quot; &quot;离开插入模式后自动关闭预览窗口</span><br><span class="line">inoremap &lt;expr&gt; &lt;CR&gt;       pumvisible() ? &quot;\&lt;C-y&gt;&quot; : &quot;\&lt;CR&gt;&quot;</span><br><span class="line">&quot; &quot;回车即选中当前项</span><br><span class="line">&quot;</span><br><span class="line">&quot; &quot;上下左右键的行为 会显示其他信息</span><br><span class="line">inoremap &lt;expr&gt; &lt;Down&gt;     pumvisible() ? &quot;\&lt;C-n&gt;&quot; : &quot;\&lt;Down&gt;&quot;</span><br><span class="line">inoremap &lt;expr&gt; &lt;Up&gt;       pumvisible() ? &quot;\&lt;C-p&gt;&quot; : &quot;\&lt;Up&gt;&quot;</span><br><span class="line">inoremap &lt;expr&gt; &lt;PageDown&gt; pumvisible() ? &quot;\&lt;PageDown&gt;\&lt;C-p&gt;\&lt;C-n&gt;&quot; :\&lt;PageDown&gt;&quot;</span><br><span class="line">inoremap &lt;expr&gt; &lt;PageUp&gt;   pumvisible() ? &quot;\&lt;PageUp&gt;\&lt;C-p&gt;\&lt;C-n&gt;&quot; :\&lt;PageUp&gt;&quot;</span><br><span class="line"></span><br><span class="line">&quot;youcompleteme  默认tab  s-tab 和自动补全冲突</span><br><span class="line">let g:ycm_key_list_select_completion=[&apos;&lt;c-n&gt;&apos;]</span><br><span class="line">let g:ycm_key_list_select_completion = [&apos;&lt;Down&gt;&apos;]</span><br><span class="line">let g:ycm_key_list_previous_completion=[&apos;&lt;c-p&gt;&apos;]</span><br><span class="line">let g:ycm_key_list_previous_completion = [&apos;&lt;Up&gt;&apos;]</span><br><span class="line">let g:ycm_confirm_extra_conf=0 &quot;关闭加载.ycm_extra_conf.py提示</span><br><span class="line"></span><br><span class="line">let g:ycm_collect_identifiers_from_tags_files=1   &quot; 开启 YCM</span><br><span class="line">&quot; 基于标签引擎</span><br><span class="line">let g:ycm_min_num_of_chars_for_completion=2   &quot;</span><br><span class="line">&quot; 从第2个键入字符就开始罗列匹配项</span><br><span class="line">let g:ycm_cache_omnifunc=0    &quot;</span><br><span class="line">&quot; 禁止缓存匹配项,每次都重新生成匹配项</span><br><span class="line">let g:ycm_seed_identifiers_with_syntax=1  &quot; 语法关键字补全</span><br><span class="line">&quot;nnoremap &lt;F5&gt; :YcmForceCompileAndDiagnostics&lt;CR&gt;  &quot;force recomile with</span><br><span class="line">&quot; syntastic</span><br><span class="line">nnoremap &lt;leader&gt;lo :lopen&lt;CR&gt;   &quot;open locationlist</span><br><span class="line">nnoremap &lt;leader&gt;lc :lclose&lt;CR&gt;  &quot;close locationlist</span><br><span class="line">inoremap &lt;leader&gt;&lt;leader&gt; &lt;C-x&gt;&lt;C-o&gt;</span><br><span class="line">&quot;在注释输入中也能补全</span><br><span class="line">let g:ycm_complete_in_comments = 1</span><br><span class="line">&quot;在字符串输入中也能补全</span><br><span class="line">let g:ycm_complete_in_strings = 1</span><br><span class="line">&quot;注释和字符串中的文字也会被收入补全</span><br><span class="line">let g:ycm_collect_identifiers_from_comments_and_strings = 0</span><br><span class="line"></span><br><span class="line">let g:airline#extensions#tabline#enabled = 1</span><br><span class="line">let g:airline#extensions#tabline#buffer_nr_show = 1</span><br><span class="line">nnoremap &lt;C-N&gt; :bn&lt;CR&gt;</span><br><span class="line">nnoremap &lt;C-P&gt; :bp&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">&quot;每行最长字节个数的竖线</span><br><span class="line">let &amp;colorcolumn=&quot;100&quot;</span><br><span class="line">&quot;highlight CursorLine cterm=NONE ctermbg=blue ctermfg=NONE guibg=NONE guifg=NONE</span><br><span class="line">highlight CursorLine cterm=NONE ctermbg=DarkGrey ctermfg=NONE guibg=NONE guifg=NONE</span><br><span class="line"></span><br><span class="line">&quot;自动化格式所有c/c++代码</span><br><span class="line">au BufWrite *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx :Autoformat</span><br><span class="line"></span><br><span class="line">&quot;自动格式化go代码</span><br><span class="line">let g:go_fmt_command = &quot;goimports&quot;</span><br><span class="line"></span><br><span class="line">set mouse=</span><br><span class="line">let g:golang_goroot = &quot;/home/mysql/tools/tool_package/go&quot;</span><br><span class="line">autocmd FileType go compiler golang</span><br><span class="line">let g:golang_onwrite = 0</span><br><span class="line">let g:golang_inline_highlight = 0</span><br><span class="line">let g:golang_cwindow = 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">set statusline+=%#warningmsg#</span><br><span class="line">set statusline+=%&#123;SyntasticStatuslineFlag()&#125;</span><br><span class="line">set statusline+=%*</span><br><span class="line"></span><br><span class="line">let g:syntastic_always_populate_loc_list = 1</span><br><span class="line">let g:syntastic_auto_loc_list = 1</span><br><span class="line">let g:syntastic_check_on_open = 1</span><br><span class="line">let g:syntastic_check_on_wq = 0</span><br><span class="line"></span><br><span class="line">let g:javascript_plugin_jsdoc = 1</span><br><span class="line">let g:javascript_plugin_ngdoc = 1</span><br><span class="line">let g:javascript_plugin_flow = 1</span><br><span class="line">set foldmethod=syntax</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录了一些常用的vim配置以及相应的插件&lt;/p&gt;
    
    </summary>
    
      <category term="vim相关笔记" scheme="http://yoursite.com/categories/vim%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>mac software</title>
    <link href="http://yoursite.com/2017/11/23/mac-software/"/>
    <id>http://yoursite.com/2017/11/23/mac-software/</id>
    <published>2017-11-23T01:20:13.000Z</published>
    <updated>2017-11-23T16:45:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MAC-常用的软件"><a href="#MAC-常用的软件" class="headerlink" title="MAC 常用的软件"></a>MAC 常用的软件</h1><p>非常好用的的工作与系统软件。:)</p><a id="more"></a><hr><h2 id="工作软件"><a href="#工作软件" class="headerlink" title="工作软件"></a>工作软件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- Microsoft office 2017     # office全家桶</span><br><span class="line">- Xmind 8.0                 # 脑图</span><br><span class="line">- secureCRT 8.0.2           # 主要用来上传和下载文件</span><br><span class="line">- iTerm2                    # 登陆服务器操作和写代码</span><br><span class="line">- OmniGraffle               # 绘画流程图以及UML</span><br><span class="line">- Beyond Compare            # (代码)文件和目录对比</span><br><span class="line">- CHM Reader                # 查看chm格式的文档</span><br><span class="line">- atom/CLion/VS code        # 阅读各种代码文件利器</span><br><span class="line">- PDF Expert                # 阅读pdf文件</span><br><span class="line">- Mou                       # 编写Markdown文本</span><br><span class="line">- VirtualBox                # 虚拟机</span><br></pre></td></tr></table></figure><hr><h2 id="系统软件"><a href="#系统软件" class="headerlink" title="系统软件"></a>系统软件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- chrome# 主力浏览器</span><br><span class="line">- BetterZip# 压缩和解压</span><br><span class="line">- QQ/微信#主力聊天工具</span><br><span class="line">- Android文件传输# 连接安卓设备软件</span><br><span class="line">- Bartender 2# 菜单栏优化</span><br><span class="line">- Dr. Cleaner Pro# 清理垃圾和卸载软件</span><br><span class="line">- IINA# 视频播放器</span><br><span class="line">- Karabiner# 键盘映射软件</span><br><span class="line">- TinyCal# 日历软件</span><br><span class="line">- QQ音乐/网易云音乐/虾米# 音乐播放器</span><br><span class="line">- ScreenFlow# 视频录制</span><br><span class="line">- Scroll Reverser# 鼠标和触摸板的滚动方向设置</span><br><span class="line">- ShadowsocksX# 翻墙必备</span><br><span class="line">- Alternote# 基于印象笔记的笔记软件</span><br><span class="line">- YoMail/Spark# 轻量级的邮箱软件</span><br><span class="line">- PDFProtector# 加密pdf软件</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MAC-常用的软件&quot;&gt;&lt;a href=&quot;#MAC-常用的软件&quot; class=&quot;headerlink&quot; title=&quot;MAC 常用的软件&quot;&gt;&lt;/a&gt;MAC 常用的软件&lt;/h1&gt;&lt;p&gt;非常好用的的工作与系统软件。:)&lt;/p&gt;
    
    </summary>
    
      <category term="tools" scheme="http://yoursite.com/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title>firstBlog</title>
    <link href="http://yoursite.com/2017/11/23/firstBlog/"/>
    <id>http://yoursite.com/2017/11/23/firstBlog/</id>
    <published>2017-11-22T17:17:30.000Z</published>
    <updated>2017-11-22T17:18:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-夏明的博客"><a href="#1-夏明的博客" class="headerlink" title="1. 夏明的博客"></a>1. 夏明的博客</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">retrun 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;1-夏明的博客&quot;&gt;&lt;a href=&quot;#1-夏明的博客&quot; class=&quot;headerlink&quot; title=&quot;1. 夏明的博客&quot;&gt;&lt;/a&gt;1. 夏明的博客&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
        
      
    
    </summary>
    
    
  </entry>
  
</feed>
