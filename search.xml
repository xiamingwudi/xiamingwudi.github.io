<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[手动安装YCM]]></title>
    <url>%2F2017%2F11%2F24%2F%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85YCM%2F</url>
    <content type="text"><![CDATA[&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;对于常年使用vim的我来说，是多么希望vim拥有与IDE一样的可以实现类成员访问或者自动补全关键字、函数名等各种神奇的操作，通过Google发现，vim中有一个神奇的插件，即YouCompleteMe，简称YCM，如果机器可以连接外网的话，是可以通过vundle直接在线安装的，可惜公司内部的开发测试机都是无法访问外网的，所以只能自己去折腾手动安装YCM的方法了，不废话了，下面就来详细说一下具体安装方式。 YCM安装的前期准备 系统环境 Name Verison OS Centos 6.3 kernel 2.6.32 gcc 4.4.6 cmake 3.4.1 llvm 3.3 ycm 最新版源码即可 YCM的安装这里不复述gcc、cmake以及vim的安装方法，网上一抓一大把，本文只着重讨论llvm和YCM安装的过程。 llvm 在与llvm-3.3.src同一目录下创建用于存放编译结果的目录build 在build目录下生成Makefile文件 1234567891011cd build#优化编译llvm，否则会产生大容量的文件../llvm-3.3.src/configure --enable-optimized --enable-targets=host-only#并行编译make -j4#安装llvmmake install ycm 获取ycm最新代码 12345# 在外网将ycm的代码全部get下来git clone https://github.com/Valloric/YouCompleteMe.git# 安装ycm所需的所有依赖，然后打包上传到自己服务器上cd YouCompleteMe &amp;&amp; git submodule update --init --recursive 编译安装ycm 将打包好的ycm源码包拷贝到~/.vim/bundle/目录即可 12345678# 在任意位置创建目录mkdir ycm_build# 生成Makefilecmake -G "Unix Makefiles" -DUSE_SYSTEM_LIBCLANG=ON . ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp# 编译cmake --build . --target ycm_support_libs 在vimrc中的设置YCM123456789101112131415161718192021222324&quot;youcompleteme 默认tab s-tab 和自动补全冲突let g:ycm_key_list_select_completion=[&apos;&lt;c-n&gt;&apos;]let g:ycm_key_list_select_completion = [&apos;&lt;Down&gt;&apos;]let g:ycm_key_list_previous_completion=[&apos;&lt;c-p&gt;&apos;]let g:ycm_key_list_previous_completion = [&apos;&lt;Up&gt;&apos;]let g:ycm_confirm_extra_conf=0 &quot;关闭加载.ycm_extra_conf.py提示let g:ycm_collect_identifiers_from_tags_files=1 &quot; 开启 YCM&quot; 基于标签引擎let g:ycm_min_num_of_chars_for_completion=2 &quot;&quot; 从第2个键入字符就开始罗列匹配项let g:ycm_cache_omnifunc=0 &quot;&quot; 禁止缓存匹配项,每次都重新生成匹配项let g:ycm_seed_identifiers_with_syntax=1 &quot; 语法关键字补全&quot;nnoremap &lt;F5&gt; :YcmForceCompileAndDiagnostics&lt;CR&gt; &quot;force recomile with&quot; syntasticnnoremap &lt;leader&gt;lo :lopen&lt;CR&gt; &quot;open locationlistnnoremap &lt;leader&gt;lc :lclose&lt;CR&gt; &quot;close locationlistinoremap &lt;leader&gt;&lt;leader&gt; &lt;C-x&gt;&lt;C-o&gt;&quot;在注释输入中也能补全let g:ycm_complete_in_comments = 1&quot;在字符串输入中也能补全let g:ycm_complete_in_strings = 1let g:ycm_collect_identifiers_from_comments_and_strings = 0 体验YCM]]></content>
      <categories>
        <category>vim相关笔记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[引用的本质分析]]></title>
    <url>%2F2017%2F11%2F23%2F%E5%BC%95%E7%94%A8%E7%9A%84%E6%9C%AC%E8%B4%A8%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[1. 引用的意义引用作为变量别名（另一种表现形式）而存在，因此在某一些场合可以代替指针引用相对于指针来说具有更好的可读性和实用性.]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[进化的const]]></title>
    <url>%2F2017%2F11%2F23%2F%E8%BF%9B%E5%8C%96%E7%9A%84const%2F</url>
    <content type="text"><![CDATA[C语言中的const const修饰的变量是只读的，其本质仍然是变量 const修饰的局部变量在栈上分配空间，可以根据指针去修改其中的值 const修饰的全局变量在只读存储区分配空间 const值在编译期间有用，在运行期间无作用 const修饰的变量并不是真正的常量，它只是告诉编译器该变量不能出现在赋值符号的左边；C语言中的const只是使得变量具有只读属性；const将具有全局声明周期的变量存储于只读存储区 C++中的const先看一个例子： 123456789101112#include &lt;iostream&gt;using namespace std;int main()&#123; const int c = 0; int* p = (int*c)&amp;c; cout &lt;&lt; p &lt;&lt; endl; *p = 5; cout &lt;&lt; c &lt;&lt; endl; //只输出0 cout &lt;&lt; *p &lt;&lt; endl; //输出5，这是为什么？&#125; 编译时，编译器碰到const声明时，会在符号表中存入这个const所修饰的常量。再继续编译时，如果发现使用了该常量，则直接用符号表中的值进行替换。由于C++兼容C语言，所以仍然会给const修饰的变量分配空间，通常该内存空间不会被使用，但是在如下两个情况下才会被分配： 对const常量使用了关键字extern，即为外部代码使用 对const常量使用了&amp;操作符，即取值 需要注意的是，C++编译器虽然可能会为const常量分配空间，但是不会使用其中的存储值，这么做仅仅是为了兼容C语言，这也能解释了上面例子中注释所标注的结果。 符号表符号表是编译器在编译过程中产生的表，该表示编译器内部使用的一种数据结构，比如，当定义了 const int c = 0; 此时编译器就会将c与0存入符号表中，当编译到使用c的地方时，直接从符号表中取出c对应的值进行替换。 name value … … c 0 … … C++中的const常量类似于宏定义，宏定义是在预处理时对文本进行替换处理，而const是在编译过程中编译器对const常量进行类型检查和作用域检查。宏定义是由预处理处理，只是单纯的文本替换而已。最后，再来一个用例感受一下。 12345678910111213141516171819202122232425262728293031void f()&#123; #define a 3 const int b = 4;&#125;void g()&#123; /* * g()中可以访问到f()中定义的宏，这是因为宏定义是预处理器处理的，直接进行文本替换； * 而编译器并不知道宏是什么，即编译器看到的a就是3，没有机会对宏进行作用域检查 */ cout &lt;&lt; a &lt;&lt; endl;&#125;int main()&#123; const int A = 1; const int B = 2; /* * C语言中会报错，因为A和B都是变量 * C++中不会报错，因为A和B是真正的常量 */ int array[A + B] = &#123;0&#125;; for (int i=0; i&lt;(A+B); i++)&#123; cout &lt;&lt; array[i] &lt;&lt; endl; &#125; f(); g(); return 0;&#125;]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>编程基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vimrc]]></title>
    <url>%2F2017%2F11%2F23%2Fvimrc%2F</url>
    <content type="text"><![CDATA[记录了一些常用的vim配置以及相应的插件let mapleader=&quot;;&quot;set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936set encoding=utf-8set termencoding=utf-8set rtp+=~/.vim/bundle/vundle/call vundle#begin()Plugin &apos;nerdcommenter/NERD_commenter.vim&apos;Plugin &apos;nerdtree/NERD_tree.vim&apos;Plugin &apos;taglist/taglist.vim&apos;Plugin &apos;vim-fswitch/fswitch.vim&apos;Plugin &apos;Valloric/YouCompleteMe&apos;Plugin &apos;hari-rangarajan/CCTree&apos;Plugin &apos;mattn/emmet-vim&apos;Plugin &apos;pangloss/vim-javascript&apos;Plugin &apos;Chiel92/vim-autoformat&apos;&quot;Plugin &apos;vim-go/go.vim&apos;&quot;Plugin &apos;vim-gocode/godoc.vim&apos;&quot;Plugin &apos;vim-godef/godef.vim&apos;call vundle#end()colorscheme default&quot;nnoremap &lt;silent&gt; &lt;F4&gt; :Tlist&lt;CR&gt;&quot;nnoremap &lt;silent&gt; &lt;F4&gt; :TagbarToggle&lt;CR&gt;&quot;nnoremap &lt;silent&gt; &lt;F5&gt; :NERDTreeToggle&lt;CR&gt;map &lt;F6&gt; :TagbarToggle&lt;CR&gt;map &lt;F7&gt; :NERDTreeToggle&lt;CR&gt;&quot; 开启文件类型侦测filetype on&quot; 根据侦测到的不同类型加载对应的插件filetype plugin on&quot; 定义快捷键到行首和行尾nmap LB 0&quot; 开启实时搜索功能set incsearch&quot; 搜索时大小写不敏感set ignorecase&quot; 关闭兼容模式set nocompatible&quot; vim 自身命令行模式智能补全set wildmenu&quot; 将 pathogen 自身也置于独立目录中，需指定其路径runtime bundle/pathogen/autoload/pathogen.vim&quot; 运行 pathogenexecute pathogen#infect()&quot; 禁止光标闪烁set gcr=a:block-blinkon0&quot; 总是显示状态栏set laststatus=2&quot; 开启行号显示set number&quot; 高亮显示当前行/列set cursorline&quot;set cursorcolumn&quot; 高亮显示搜索结果set hlsearch&quot; 设置 gvim 显示字体set guifont=YaHei\ Consolas\ Hybrid\ 11.5&quot; 禁止折行set nowrap&quot;将un文件统一写入let $VIMFILES = $HOMEset undofileset undodir=$VIMFILES/.undodir&quot; 设置状态栏主题风格let g:Powerline_colorscheme=&apos;solarized256&apos;set guifont=PowerlineSymbols\ for\ Powerlineset nocompatibleset laststatus=2set t_Co=256let g:Powerline_symbols = &apos;fancy&apos;let Powerline_symbols=&apos;compatible&apos;&quot; 开启语法高亮功能syntax enable&quot; &quot; 允许用指定语法高亮配色方案替换默认方案syntax on&quot; 自适应不同语言的智能缩进filetype indent on&quot; &quot; 将制表符扩展为空格set expandtab&quot; 设置编辑时制表符占用空格数set tabstop=4&quot; 设置格式化时制表符占用空格数set shiftwidth=4&quot; 让 vim 把连续数量的空格视为一个制表符set softtabstop=4&quot; 随 vim 自启动&quot;let g:indent_guides_enable_on_vim_startup=1&quot; 从第二层开始可视化显示缩进let g:indent_guides_start_level=2&quot; 色块宽度let g:indent_guides_guide_size=1&quot; 快捷键 i 开/关缩进可视化:nmap &lt;silent&gt; &lt;Leader&gt;i &lt;Plug&gt;IndentGuidesToggle&quot; 基于缩进或语法进行代码折叠set foldmethod=indentset foldmethod=syntax&quot; 启动 vim 时关闭折叠代码set nofoldenable&quot; *.cpp 和 *.h 间切换nmap &lt;Leader&gt;ch :A&lt;CR&gt;&quot; 子窗口中显示 *.cpp 或 *.hnmap &lt;Leader&gt;sch :AS&lt;CR&gt;&quot; 正向遍历同名标签nmap &lt;Leader&gt;tn :tnext&lt;CR&gt;&quot; 反向遍历同名标签nmap &lt;Leader&gt;tp :tprevious&lt;CR&gt;&quot; 设置插件 indexer 调用 ctags 的参数&quot; 默认 --c++-kinds=+p+l，重新设置为 --c++-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v&quot; 默认 --fields=+iaS 不满足 YCM 要求，需改为 --fields=+iaSllet g:indexer_ctagsCommandLineOptions=&quot;--c++-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v --fields=+iaSl --extra=+q&quot;nnoremap &lt;leader&gt;jd :YcmCompleter GoToDeclaration&lt;CR&gt;&quot; 只能是 #include 或已打开的文件nnoremap &lt;leader&gt;je :YcmCompleter GoToDefinition&lt;CR&gt;&quot; 设置 tagbar 子窗口的位置出现在主编辑区的左边let tagbar_left=1&quot; 设置显示／隐藏标签列表子窗口的快捷键。速记：tag listnnoremap &lt;Leader&gt;tl :TagbarToggle&lt;CR&gt;&quot; 设置标签子窗口的宽度let tagbar_width=32&quot; tagbar 子窗口中不显示冗余帮助信息let g:tagbar_compact=1&quot; 设置 ctags 对哪些代码元素生成标签let g:tagbar_type_cpp = &#123; \ &apos;kinds&apos; : [ \ &apos;d:macros:1&apos;, \ &apos;g:enums&apos;, \ &apos;t:typedefs:0:0&apos;, \ &apos;e:enumerators:0:0&apos;, \ &apos;n:namespaces&apos;, \ &apos;c:classes&apos;, \ &apos;s:structs&apos;, \ &apos;u:unions&apos;, \ &apos;f:functions&apos;, \ &apos;m:members:0:0&apos;, \ &apos;v:global:0:0&apos;, \ &apos;x:external:0:0&apos;, \ &apos;l:local:0:0&apos; \ ], \ &apos;sro&apos; : &apos;::&apos;, \ &apos;kind2scope&apos; : &#123; \ &apos;g&apos; : &apos;enum&apos;, \ &apos;n&apos; : &apos;namespace&apos;, \ &apos;c&apos; : &apos;class&apos;, \ &apos;s&apos; : &apos;struct&apos;, \ &apos;u&apos; : &apos;union&apos; \ &#125;, \ &apos;scope2kind&apos; : &#123; \ &apos;enum&apos; : &apos;g&apos;, \ &apos;namespace&apos; : &apos;n&apos;, \ &apos;class&apos; : &apos;c&apos;, \ &apos;struct&apos; : &apos;s&apos;, \ &apos;union&apos; : &apos;u&apos; \ &#125;, \ &#125;&quot;autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx call tagbar#autoopen()let OmniCpp_DefaultNamespaces = [&quot;_GLIBCXX_STD&quot;]&quot;set tags+=/usr/include/c++/4.4.6/stdcpp.tags&quot;set tags+=/usr/include/sys.tagsautocmd BufNewFile *.cpp,*.cc,*.[ch],*.sh,*.java exec &quot;:call SetTitle()&quot;&quot;定义函数SetTitle，自动插入文件头func SetTitle() &quot;如果文件类型为.sh文件 if &amp;filetype == &apos;sh&apos; call setline(1,&quot;\#########################################################################&quot;) call append(line(&quot;.&quot;), &quot;\# File Name: &quot;.expand(&quot;%&quot;)) call append(line(&quot;.&quot;)+1, &quot;\# Author: XiaMing&quot;) call append(line(&quot;.&quot;)+2, &quot;\# mail: xiaming@baidu.com&quot;) call append(line(&quot;.&quot;)+3, &quot;\# Created Time: &quot;.strftime(&quot;%c&quot;)) call append(line(&quot;.&quot;)+4, &quot;\#########################################################################&quot;) call append(line(&quot;.&quot;)+5, &quot;\#!/bin/bash&quot;) call append(line(&quot;.&quot;)+6, &quot;&quot;) else call setline(1, &quot;/*************************************************************************&quot;) call append(line(&quot;.&quot;), &quot;* Copyright(c) 2009-2017 Baidu Inc&quot;) call append(line(&quot;.&quot;)+1, &quot;* All rights reserved&quot;) call append(line(&quot;.&quot;)+2, &quot;* &quot;) call append(line(&quot;.&quot;)+3, &quot;* @filename: &quot;.expand(&quot;%&quot;)) call append(line(&quot;.&quot;)+4, &quot;* @brief: &quot;) call append(line(&quot;.&quot;)+5, &quot;* @version: &quot;) call append(line(&quot;.&quot;)+6, &quot;* @author: XiaMing&quot;) call append(line(&quot;.&quot;)+7, &quot;* @date: &quot;.strftime(&quot;%c&quot;)) call append(line(&quot;.&quot;)+8, &quot; ************************************************************************/&quot;) call append(line(&quot;.&quot;)+9, &quot;&quot;) endif if &amp;filetype == &apos;cpp&apos; call append(line(&quot;.&quot;)+10, &quot;#include &lt;iostream&gt;&quot;) call append(line(&quot;.&quot;)+11, &quot;using namespace std;&quot;) call append(line(&quot;.&quot;)+12, &quot;int main()&#123;&quot;) call append(line(&quot;.&quot;)+13, &quot; return 0;&quot;) call append(line(&quot;.&quot;)+14, &quot;&#125;&quot;) call append(line(&quot;.&quot;)+15, &quot;&quot;) endif if &amp;filetype == &apos;c&apos; call append(line(&quot;.&quot;)+10, &quot;#include &lt;stdio.h&gt;&quot;) call append(line(&quot;.&quot;)+11, &quot;#include &lt;stdlib.h&gt;&quot;) call append(line(&quot;.&quot;)+12, &quot;&quot;) endif if &amp;filetype == &apos;cc&apos; call append(line(&quot;.&quot;)+10, &quot;#include &lt;iostream&gt;&quot;) call append(line(&quot;.&quot;)+11, &quot;using namespace std;&quot;) call append(line(&quot;.&quot;)+12, &quot;&quot;) endif autocmd BufNewFile * normal Gendfunclet OmniCpp_DefaultNamespaces = [&quot;_GLIBCXX_STD&quot;]&quot;set tags+=/usr/include/c++/4.4.4/stdcpp.tagslet NERDTreeMinimalUI=0let NERDTreeWinPos=&quot;right&quot;let NERDTreeQuitOnOpen=1&quot;只剩 NERDTree时自动关闭autocmd bufenter * if (winnr(&quot;$&quot;) == 1 &amp;&amp; exists(&quot;b:NERDTreeType&quot;) &amp;&amp; b:NERDTreeType == &quot;primary&quot;) | q | endif&quot; *.cpp 和 *.h 间切换nmap &lt;silent&gt; &lt;Leader&gt;sw :FSHere&lt;cr&gt;&quot;taglist窗口显示在右侧，缺省为左侧let Tlist_Use_Right_Window =1let OmniCpp_DefaultNamespaces = [&quot;_GLIBCXX_STD&quot;]let g:ycm_global_ycm_extra_conf = &apos;/home/mysql/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py&apos;let g:ycm_seed_identifiers_with_syntax=1set tags=tags;set autochdir&quot;cscope设置set cscopequickfix=s-,c-,d-,i-,t-,e-if filereadable(&quot;cscope.out&quot;) cs add cscope.outendifif has(&quot;cscope&quot;) set csprg=/usr/local/bin/cscope set csto=0 set cst set nocsverb if filereadable(&quot;cscope.out&quot;) cs add cscope.out elseif $CSCOPE_DB != &quot;&quot; cs add $CSCOPE_DB endif set csverbendifnmap &lt;silent&gt; &lt;Leader&gt;s :cs find s &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;nmap &lt;silent&gt; &lt;Leader&gt;g :cs find g &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;nmap &lt;silent&gt; &lt;Leader&gt;c :cs find c &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;nmap &lt;silent&gt; &lt;Leader&gt;t :cs find t &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;nmap &lt;silent&gt; &lt;Leader&gt;e :cs find e &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;nmap &lt;silent&gt; &lt;Leader&gt;f :cs find f &lt;C-R&gt;=expand(&quot;&lt;cfile&gt;&quot;)&lt;CR&gt;&lt;CR&gt;nmap &lt;silent&gt; &lt;Leader&gt;i :cs find i &lt;C-R&gt;=expand(&quot;&lt;cfile&gt;&quot;)&lt;CR&gt;&lt;CR&gt;nmap &lt;silent&gt; &lt;Leader&gt;d :cs find d &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;nmap &lt;Leader&gt;tb :TagbarToggle&lt;CR&gt;let g:tagbar_ctags_bin=&apos;/usr/bin/ctags&apos;let g:tagbar_width=30&quot;在以下文件中开启tagbar&quot;autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx call tagbar#autoopen()&quot; 自动补全配置set completeopt=longest,menu&quot; &quot;让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)autocmd InsertLeave * if pumvisible() == 0|pclose|endif&quot; &quot;离开插入模式后自动关闭预览窗口inoremap &lt;expr&gt; &lt;CR&gt; pumvisible() ? &quot;\&lt;C-y&gt;&quot; : &quot;\&lt;CR&gt;&quot;&quot; &quot;回车即选中当前项&quot;&quot; &quot;上下左右键的行为 会显示其他信息inoremap &lt;expr&gt; &lt;Down&gt; pumvisible() ? &quot;\&lt;C-n&gt;&quot; : &quot;\&lt;Down&gt;&quot;inoremap &lt;expr&gt; &lt;Up&gt; pumvisible() ? &quot;\&lt;C-p&gt;&quot; : &quot;\&lt;Up&gt;&quot;inoremap &lt;expr&gt; &lt;PageDown&gt; pumvisible() ? &quot;\&lt;PageDown&gt;\&lt;C-p&gt;\&lt;C-n&gt;&quot; :\&lt;PageDown&gt;&quot;inoremap &lt;expr&gt; &lt;PageUp&gt; pumvisible() ? &quot;\&lt;PageUp&gt;\&lt;C-p&gt;\&lt;C-n&gt;&quot; :\&lt;PageUp&gt;&quot;&quot;youcompleteme 默认tab s-tab 和自动补全冲突let g:ycm_key_list_select_completion=[&apos;&lt;c-n&gt;&apos;]let g:ycm_key_list_select_completion = [&apos;&lt;Down&gt;&apos;]let g:ycm_key_list_previous_completion=[&apos;&lt;c-p&gt;&apos;]let g:ycm_key_list_previous_completion = [&apos;&lt;Up&gt;&apos;]let g:ycm_confirm_extra_conf=0 &quot;关闭加载.ycm_extra_conf.py提示let g:ycm_collect_identifiers_from_tags_files=1 &quot; 开启 YCM&quot; 基于标签引擎let g:ycm_min_num_of_chars_for_completion=2 &quot;&quot; 从第2个键入字符就开始罗列匹配项let g:ycm_cache_omnifunc=0 &quot;&quot; 禁止缓存匹配项,每次都重新生成匹配项let g:ycm_seed_identifiers_with_syntax=1 &quot; 语法关键字补全&quot;nnoremap &lt;F5&gt; :YcmForceCompileAndDiagnostics&lt;CR&gt; &quot;force recomile with&quot; syntasticnnoremap &lt;leader&gt;lo :lopen&lt;CR&gt; &quot;open locationlistnnoremap &lt;leader&gt;lc :lclose&lt;CR&gt; &quot;close locationlistinoremap &lt;leader&gt;&lt;leader&gt; &lt;C-x&gt;&lt;C-o&gt;&quot;在注释输入中也能补全let g:ycm_complete_in_comments = 1&quot;在字符串输入中也能补全let g:ycm_complete_in_strings = 1&quot;注释和字符串中的文字也会被收入补全let g:ycm_collect_identifiers_from_comments_and_strings = 0let g:airline#extensions#tabline#enabled = 1let g:airline#extensions#tabline#buffer_nr_show = 1nnoremap &lt;C-N&gt; :bn&lt;CR&gt;nnoremap &lt;C-P&gt; :bp&lt;CR&gt;&quot;每行最长字节个数的竖线let &amp;colorcolumn=&quot;100&quot;&quot;highlight CursorLine cterm=NONE ctermbg=blue ctermfg=NONE guibg=NONE guifg=NONEhighlight CursorLine cterm=NONE ctermbg=DarkGrey ctermfg=NONE guibg=NONE guifg=NONE&quot;自动化格式所有c/c++代码au BufWrite *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx :Autoformat&quot;自动格式化go代码let g:go_fmt_command = &quot;goimports&quot;set mouse=let g:golang_goroot = &quot;/home/mysql/tools/tool_package/go&quot;autocmd FileType go compiler golanglet g:golang_onwrite = 0let g:golang_inline_highlight = 0let g:golang_cwindow = 0set statusline+=%#warningmsg#set statusline+=%&#123;SyntasticStatuslineFlag()&#125;set statusline+=%*let g:syntastic_always_populate_loc_list = 1let g:syntastic_auto_loc_list = 1let g:syntastic_check_on_open = 1let g:syntastic_check_on_wq = 0let g:javascript_plugin_jsdoc = 1let g:javascript_plugin_ngdoc = 1let g:javascript_plugin_flow = 1set foldmethod=syntax]]></content>
      <categories>
        <category>vim相关笔记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[mac software]]></title>
    <url>%2F2017%2F11%2F23%2Fmac-software%2F</url>
    <content type="text"><![CDATA[MAC 常用的软件非常好用的的工作与系统软件。:) 工作软件1234567891011- Microsoft office 2017 # office全家桶- Xmind 8.0 # 脑图- secureCRT 8.0.2 # 主要用来上传和下载文件- iTerm2 # 登陆服务器操作和写代码- OmniGraffle # 绘画流程图以及UML- Beyond Compare # (代码)文件和目录对比- CHM Reader # 查看chm格式的文档- atom/CLion/VS code # 阅读各种代码文件利器- PDF Expert # 阅读pdf文件- Mou # 编写Markdown文本- VirtualBox # 虚拟机 系统软件12345678910111213141516- chrome # 主力浏览器- BetterZip # 压缩和解压- QQ/微信 #主力聊天工具- Android文件传输 # 连接安卓设备软件- Bartender 2 # 菜单栏优化- Dr. Cleaner Pro # 清理垃圾和卸载软件- IINA # 视频播放器- Karabiner # 键盘映射软件- TinyCal # 日历软件- QQ音乐/网易云音乐/虾米 # 音乐播放器- ScreenFlow # 视频录制- Scroll Reverser # 鼠标和触摸板的滚动方向设置- ShadowsocksX # 翻墙必备- Alternote # 基于印象笔记的笔记软件- YoMail/Spark # 轻量级的邮箱软件- PDFProtector # 加密pdf软件]]></content>
      <categories>
        <category>tools</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[firstBlog]]></title>
    <url>%2F2017%2F11%2F23%2FfirstBlog%2F</url>
    <content type="text"><![CDATA[1. 夏明的博客1234#include &lt;stdio.h&gt;int main()&#123; retrun 0;&#125;]]></content>
  </entry>
</search>
